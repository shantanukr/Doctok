package jerseydemo;

import javax.ws.rs.Path;

import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;  
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;

import javax.ws.rs.QueryParam;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.*;
import java.io.IOException;
import java.util.*;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.*;

import jerseydemo.*;

@Path("/user")

public class UserResource {
	int name;
	int next=1,i=0;
	Ques qu = new Ques();
	//QnADAO qna = new QnADAO();
	int q= qu.init();
	String[] question;	
	// question set file
	public static void write (String filename, String[] x) throws IOException{
		  BufferedWriter outputWriter = null;
		  outputWriter = new BufferedWriter(new FileWriter(filename));
		  for (int i = 0; i < x.length; i++) {
		    // Maybe:
		    outputWriter.write(x[i]+"");
		    // Or: 
		    //s outputWriter.write((x[i]));
		    outputWriter.newLine();
		  }
		  outputWriter.flush();  
		  outputWriter.close();
	}
	
	public String[] readLines(String filename) throws IOException 
    {
        FileReader fileReader = new FileReader(filename);
         
        BufferedReader bufferedReader = new BufferedReader(fileReader);
        List<String> lines = new ArrayList<String>();
        String line = null;
         
        while ((line = bufferedReader.readLine()) != null) 
        {
            lines.add(line);
        }
         
        bufferedReader.close();
         
        return lines.toArray(new String[lines.size()]);
    }
	
	//Conclusion read file
	
	/*@GET
	@Path("/init")
	@Produces({ MediaType.APPLICATION_JSON })
	public void fetchUser(@QueryParam("uname") String user)
	{
		System.out.println("hello");
		String s=user+"hello";
		System.out.println(s);
		
	}*/
	/*@GET
    @Produces({ MediaType.APPLICATION_JSON})
    public List<Employee> getEmployees_JSON() {  
        List<Employee> listOfCountries = EmployeeDAO.getAllEmployees();
        return listOfCountries;
        
    }*/
	//Employee emp1 = new Employee("1", "", " ");
	//empMap.put(emp1.getEmpNo(), emp1); 
	@GET
	@Path("/init")
	@Produces({ MediaType.APPLICATION_JSON })
	public Employee getEmployee(@PathParam("empNo") String empNo) {
		
		  
		return EmployeeDAO.getEmployee(empNo);
	} 
	@Produces(value={MediaType.APPLICATION_JSON})
	@POST  
	@Path("/user1")
	@Consumes(value={MediaType.APPLICATION_JSON})
	public Response postUser(@Context HttpHeaders httpHeaders€€€, JSONObject answerJSON) throws IOException
	{
		
		 //Object o1 = JSONValue.parse(user);
		//JSONObject jo = (JSONObject) o1;
//		 JSONObject jsonObj = (JSONObject) o1;
		//name = (int) jo.get("option"); 
		
		
		String user = (String) answerJSON.get("answer");
		//System.out.println("hello"+name);
		int i=Integer.parseInt(user); 
		next=(i+next)%26;
		String s=user+"hello";
		System.out.println(s);
		String[][] board = new String[100][100];
//		//BufferedReader reader = new BufferedReader(new FileReader("C:\\Users\\send8\\Documents\\Eclipse\\jerseydemo\\refer.txt"));
//		String line = "";
//		int row = 0;
//		while((line = reader.readLine()) != null)
//		{
//		   String[] cols = line.split(","); //note that if you have used space as separator you have to split on " "
//		   int col = 0;
//		   for(String  c : cols)
//		   {
//		      board[row][col] = (c);
//		      col++;
//		   } 
//		   row++;
//		}
//		reader.close();
		SQL sqlrefer=new SQL("root","doctalk2019","ind1","doctok");
		int status=sqlrefer.retriveindex1();
		if(status!=1)
		{
		qu.readResponseSecond(user);
		System.out.println("user resource");
		question = qu.findNextQuestion();
		
//		PrintWriter writerCon = new PrintWriter("c.txt");
//		writerCon.print("");
//		writerCon.close();
		
		 
//		PrintWriter writer1 = new PrintWriter("q.txt");
//		writer1.print("");
//		writer1.close();
//		if(question!=null)
//		 write ("q.txt", question); 
		 
		 /*PrintWriter writer2 = new PrintWriter("refer.txt");
			writer2.print("");
			writer2.close();*/
		 StringBuilder builder = new StringBuilder();
		 board=qu.referindex;
		 for(i = 0; i < board.length; i++)//for each row
		 {
		    for(int j = 0; j < board.length; j++)//for each column
		    {
		       builder.append(board[i][j]+"");//append to the output string
		       if(j < board.length - 1)//if this is not the last row element
		          builder.append(",");//then add comma (if you don't like commas you can use spaces)
		    }
		    builder.append("\n");//append new line at the end of the row
		 }
//		 BufferedWriter writer = new BufferedWriter(new FileWriter("refer.txt"));
//		 writer.write(builder.toString());//save the string representation of the board
//		 writer.close();
		}
		
		else 
		{
			qu.baadmein(user);
		}
		 //qna.getQues(qu
        //List<Employee> listOfCountries = EmployeeDAO.getAllEmployees(empMap);
        //
		/*for(int u=1;u<question.length;u++)
		{	

			System.out.println((10*(qu.index)+u-1)+" "+qu.q.get_option(10*(qu.index)+u-1));
		//conclusion=q.get_conclusion();

		}*/
		//empMap.clear();
		//String nextStr=String.valueOf(next);
		//empMap.put(nextStr,);
		return Response.ok(s).build();
		
	}
	@SuppressWarnings("unchecked")
	@GET
	@Path("/user2")
    @Produces({ MediaType.APPLICATION_JSON})
    public JSONObject getEmployees_JSON() throws IOException {
		//Ques qu = qna
		JSONObject jo = new JSONObject();
		SQL sqlques=new SQL("root","doctalk2019","ques","doctok");
//		jo.put("Qname", );
	System.out.println("Enter option");
	     //String con=readLines("c.txt");
	     //BufferedReader con = new BufferedReader(new FileReader("c.txt"));
	     
	     
//		 question=readLines("q.txt");
			question=sqlques.getques_set();
	 if(question.length!=0)
		 { 
			 for(int i=0;i<question.length;i++)
			 {
				 if(question[i]!=null)
				 jo.put("q"+i, question[i]);
			 }
			 jo.put("conclusion", "");   
		 }
		 else
		 {
			 String con=sqlques.getCon();
			 jo.put("conclusion", con);
		 }
		//List<String> wordList = Arrays.asList(question);
        return jo;
    }
	}


